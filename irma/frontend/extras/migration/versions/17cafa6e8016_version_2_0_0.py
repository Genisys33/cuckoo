"""version 2.0.0

Revision ID: 17cafa6e8016
Revises: 56608def7269
Create Date: 2017-07-07 08:28:33.876751

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '17cafa6e8016'
down_revision = '56608def7269'
branch_labels = None
depends_on = None


# Declare models for data migration
file_ext_table = sa.Table(
        'irma_fileExt',
        sa.MetaData(),
        sa.Column('id', sa.Integer()),
        sa.Column('external_id', sa.String()),
        sa.Column('name', sa.String()),
        sa.Column('path', sa.String()),
        sa.Column('id_file', sa.Integer()),
        sa.Column('id_parent', sa.Integer()),
        sa.Column('id_scan', sa.Integer()),
        sa.Column('submitter', sa.String()))
file_cli_table = sa.Table(
        'irma_fileCli',
        sa.MetaData(),
        sa.Column('id', sa.Integer(), sa.ForeignKey('irma_fileExt.id')),
        sa.Column('path', sa.String()))
file_web_table = sa.Table(
        'irma_fileWeb',
        sa.MetaData(),
        sa.Column('id', sa.Integer(), sa.ForeignKey('irma_fileExt.id')))


def rename_sequence(old_name, new_name):
    cmd = 'ALTER SEQUENCE "{0}" RENAME TO "{1}"'.format(old_name, new_name)
    op.execute(cmd)


def rename_index(old_name, new_name):
    cmd = 'ALTER INDEX "{0}" RENAME TO "{1}"'.format(old_name, new_name)
    op.execute(cmd)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('irma_fileWeb', 'id_scan',
                    existing_type=sa.INTEGER(),
                    nullable=True)
    op.rename_table('irma_fileWeb', 'irma_fileExt')
    op.create_index(op.f('ix_irma_fileExt_external_id'), 'irma_fileExt',
                    ['external_id'], unique=False)

    op.add_column(
            'irma_fileExt',
            sa.Column(
                    'submitter',
                    sa.String(length=50),
                    default=None
            )
    )
    # Rename FileWeb to FileExt
    op.rename_table('irma_probeResult_fileWeb',
                    'irma_probeResult_fileExt')
    rename_sequence("irma_fileWeb_id_seq",
                    "irma_fileExt_id_seq")
    rename_index("irma_fileWeb_pkey",
                 "irma_fileExt_pkey")
    rename_index("irma_fileWeb_external_id_key",
                 "irma_fileExt_external_id_key")

    op.drop_index('ix_irma_fileWeb_external_id', table_name='irma_fileWeb')
    op.drop_constraint("irma_fileWeb_id_file_fkey", "irma_fileExt")
    op.create_foreign_key('irma_fileExt_id_file_fkey', 'irma_fileExt',
                          'irma_file', ['id_file'], ['id'])

    op.drop_constraint("irma_fileWeb_id_parent_fkey", "irma_fileExt")
    op.create_foreign_key('irma_fileExt_id_parent_fkey', 'irma_fileExt',
                          'irma_file', ['id_parent'], ['id'])

    op.drop_constraint("irma_fileWeb_id_scan_fkey", "irma_fileExt")
    op.create_foreign_key('irma_fileExt_id_scan_fkey', 'irma_fileExt',
                          'irma_scan', ['id_scan'], ['id'])

    # Update ProbeResult <-> FileWeb table
    op.alter_column("irma_probeResult_fileExt",
                    column_name='id_fw',
                    new_column_name='id_fe')
    op.drop_constraint("irma_probeResult_fileWeb_id_fw_fkey",
                       "irma_probeResult_fileExt")
    op.create_foreign_key('irma_probeResult_fileExt_id_fe_fkey',
                          'irma_probeResult_fileExt',
                          'irma_fileExt', ['id_fe'], ['id'])
    op.drop_constraint("irma_probeResult_fileWeb_id_pr_fkey",
                       "irma_probeResult_fileExt")
    op.create_foreign_key('irma_probeResult_fileExt_id_pr_fkey',
                          'irma_probeResult_fileExt',
                          'irma_probeResult', ['id_pr'], ['id'])

    # Create new tables
    op.create_table('irma_fileWeb',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['id'], ['irma_fileExt.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('irma_fileCli',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('path', sa.String(length=255), nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['irma_fileExt.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('irma_fileProbeResult',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('id_probe_parent', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['id'], ['irma_fileExt.id'], ),
                    sa.ForeignKeyConstraint(['id_probe_parent'],
                                            ['irma_probeResult.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('irma_fileSuricata',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('context',
                              postgresql.JSONB(astext_type=sa.Text()),
                              nullable=True),
                    sa.ForeignKeyConstraint(['id'], ['irma_fileExt.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )

    # Read all existing FileWeb and turn them into FileExt
    # FileCli if they have a path
    # FileWeb if they have none
    connection = op.get_bind()
    for file_ext in connection.execute(file_ext_table.select()):
        if file_ext.path != "":
            connection.execute(
                    file_cli_table.insert().values(id=file_ext.id,
                                                   path=file_ext.path)
            )
            submitter = "cli"
        else:
            connection.execute(
                    file_web_table.insert().values(id=file_ext.id)
            )
            submitter = "webui"
        connection.execute(
              file_ext_table.update()
                  .where(file_ext_table.c.id == file_ext.id)
                  .values({"submitter": submitter})
        )

    # cleanup
    op.drop_column('irma_fileExt', 'path')
    op.alter_column('irma_fileExt', 'name',
                    existing_type=sa.VARCHAR(length=255),
                    nullable=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Merge FileCli and FileWeb into one single FileExt table
    # then rename it to FileWeb

    op.add_column(
            'irma_fileExt',
            sa.Column('path',
                      sa.String(length=255),
                      nullable=True),
    )

    connection = op.get_bind()
    for file_cli in connection.execute(file_cli_table.select()):
        connection.execute(
              file_ext_table.update()
                  .where(file_ext_table.c.id == file_cli.id)
                  .values({"path": file_cli.path})
        )
    op.drop_column('irma_fileExt', 'submitter')

    # drop v2.0 tables
    op.drop_table('irma_fileSuricata')
    op.drop_table('irma_fileProbeResult')
    op.drop_table('irma_fileCli')
    op.drop_table('irma_fileWeb')

    # Rename FileExt to FileWeb
    op.rename_table('irma_fileExt',
                    'irma_fileWeb')
    rename_sequence("irma_fileExt_id_seq",
                    "irma_fileWeb_id_seq")
    rename_index("irma_fileExt_pkey",
                 "irma_fileWeb_pkey")
    rename_index("irma_fileExt_external_id_key",
                 "irma_fileWeb_external_id_key")

    op.drop_index('ix_irma_fileExt_external_id', table_name='irma_fileWeb')
    op.drop_constraint("irma_fileExt_id_file_fkey", "irma_fileWeb")
    op.create_foreign_key('irma_fileWeb_id_file_fkey', 'irma_fileWeb',
                          'irma_file', ['id_file'], ['id'])

    op.drop_constraint("irma_fileExt_id_parent_fkey", "irma_fileWeb")
    op.create_foreign_key('irma_fileWeb_id_parent_fkey', 'irma_fileWeb',
                          'irma_file', ['id_parent'], ['id'])

    op.drop_constraint("irma_fileExt_id_scan_fkey", "irma_fileWeb")
    op.create_foreign_key('irma_fileWeb_id_scan_fkey', 'irma_fileWeb',
                          'irma_scan', ['id_scan'], ['id'])

    # Update ProbeResult <-> FileWeb table
    op.rename_table('irma_probeResult_fileExt',
                    'irma_probeResult_fileWeb')
    op.alter_column('irma_probeResult_fileWeb',
                    column_name='id_fe',
                    new_column_name='id_fw')
    op.drop_constraint("irma_probeResult_fileExt_id_fe_fkey",
                       "irma_probeResult_fileWeb")
    op.create_foreign_key('irma_probeResult_fileWeb_id_fw_fkey',
                          'irma_probeResult_fileWeb',
                          'irma_fileWeb', ['id_fw'], ['id'])
    op.drop_constraint("irma_probeResult_fileExt_id_pr_fkey",
                       "irma_probeResult_fileWeb")
    op.create_foreign_key('irma_probeResult_fileWeb_id_pr_fkey',
                          'irma_probeResult_fileWeb',
                          'irma_probeResult', ['id_pr'], ['id'])
    op.create_index(op.f('ix_irma_fileWeb_external_id'), 'irma_fileWeb',
                    ['external_id'], unique=False)

    # ### end Alembic commands ###
